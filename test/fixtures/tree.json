{"namespace":["Hyper","Util"],"types":{"Buffer<T>":{"members":[{"type":"property","name":"vector<T> value","comment":"Contains a vector of the type the constructor was specialized with."},{"type":"operator","name":"=","comment":"Assign one buffer to another."},{"type":"operator","name":"==","comment":"Determine if two buffers values are equal."},{"type":"operator","name":"!=","comment":"Determine if two buffers values are not equal."},{"type":"operator","name":"<<","comment":"Allow buffers to interface with streams. The value of the buffer will be represented as hex in a angle-bracket delimited string."},{"type":"operator","name":"[]","comment":"Provides access of the buffer via index."},{"name":"Buffer","type":"method","overload":false,"params":{"list":{"const":false,"reference":false,"pointer":false,"comment":""}},"comment":"Constructs a buffer from an initializer list."},{"name":"Buffer","type":"method","overload":true,"params":{},"comment":"Constructs an empty buffer."},{"name":"Buffer","type":"method","overload":true,"params":{"size":{"const":false,"reference":false,"pointer":false,"comment":"The size initially allocated for the buffer value."}},"comment":"Constructs a buffer with a value of `size`."},{"name":"Buffer","type":"method","overload":true,"params":{"null":{"const":true,"reference":true,"pointer":false,"comment":""}},"comment":"Constructs a buffer from a string."},{"name":"Buffer","type":"method","overload":true,"params":{"null":{"const":true,"reference":true,"pointer":false,"comment":""}},"comment":"Constructs a buffer from another buffer."},{"name":"toString","type":"method","overload":false,"params":{},"return":{"type":"std::string","reference":false,"pointer":false,"comment":"Get the value of of the buffer as a string."}},{"name":"length","type":"method","overload":false,"params":{},"return":{"type":"int","reference":false,"pointer":false,"comment":"Get the size of the buffer in by bytes."}},{"name":"concat","type":"method","overload":false,"params":{"list":{"const":false,"reference":true,"pointer":false,"comment":"A list of buffers to be joined."}},"comment":"Concatinate this buffer with a list of buffers.","return":{"type":"Buffer","reference":false,"pointer":false,"comment":"Returns a new combined buffer."}},{"name":"copy","type":"method","overload":false,"params":{"target":{"const":false,"reference":true,"pointer":false,"comment":"A Buffer to copy into."},"targetStart":{"const":false,"reference":false,"pointer":false,"comment":"The offset within target at which to begin writing."},"sourceStart":{"const":false,"reference":false,"pointer":false,"comment":"The offset within buf from which to begin copying."},"sourceEnd":{"const":false,"reference":false,"pointer":false,"comment":"The offset within buf at which to stop. copying (not inclusive)."}},"comment":"Copies this buffer (or part of it) into another buffer.","return":{"type":"size_t","reference":false,"pointer":false,"comment":"Returns how many bytes were written to this buffer."}},{"name":"copy","type":"method","overload":true,"params":{"target":{"const":false,"reference":true,"pointer":false,"comment":""}},"return":{"type":"size_t","reference":false,"pointer":false}},{"name":"copy","type":"method","overload":true,"params":{"target":{"const":false,"reference":true,"pointer":false,"comment":""},"targetStart":{"const":false,"reference":false,"pointer":false,"comment":""}},"return":{"type":"size_t","reference":false,"pointer":false}},{"name":"copy","type":"method","overload":true,"params":{"target":{"const":false,"reference":true,"pointer":false,"comment":""},"targetStart":{"const":false,"reference":false,"pointer":false,"comment":""},"sourceStart":{"const":false,"reference":false,"pointer":false,"comment":""}},"return":{"type":"size_t","reference":false,"pointer":false}},{"name":"slice","type":"method","overload":false,"params":{"from":{"const":false,"reference":false,"pointer":false,"comment":"Where the new Buffer will start. Default: 0."},"to":{"const":false,"reference":false,"pointer":false,"comment":"Where the new Buffer will end (not inclusive). Default: buf.length."}},"comment":"provides a new buffer that represents a slice of this one.","return":{"type":"Buffer","reference":false,"pointer":false}},{"name":"slice","type":"method","overload":true,"params":{"size_t":{"const":false,"reference":false,"pointer":false,"comment":""}},"return":{"type":"Buffer","reference":false,"pointer":false}}],"comment":"A class that provides some convenient methods for managing buffers."}},"functions":[],"repo":"https://github.com/datcxx/buffer"}
